<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS50x2 Lecture Notes</title>
    <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/</link>
    <description>Recent content on CS50x2 Lecture Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://jcausey-astate.github.io/CS50x2_lecture_notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>05b2_Parallel_&amp;_Multi-Dimensional_Arrays</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/05b2_parallel_and_multi-dimensional_arrays/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/05b2_parallel_and_multi-dimensional_arrays/</guid>
      <description>Parallel &amp;amp;Multi-DimensionalArrays Gaddis Ch. 7 Parallel Arrays Parallel Arrays: Two or more arrays containing related data such that the elements at corresponding indexes are related. All elements at index i the parallel arrays make up a single record i. Example
const int N_CONTESTANTS = 5; std::string names[N_CONTESTANTS]; int votes[N_CONTESTANTS]; // Each contestant has a name and a vote count. for(int i = 0; i &amp;lt; N_CONTESTANTS; i++){ std::cout &amp;lt;&amp;lt; &amp;#34;Contestant &amp;#34; &amp;lt;&amp;lt; (i+1) &amp;lt;&amp;lt; &amp;#34; name: &amp;#34;; std::cin &amp;gt;&amp;gt; names[i]; std::cout &amp;lt;&amp;lt; &amp;#34;# of votes for &amp;#34; &amp;lt;&amp;lt; names[i] &amp;lt;&amp;lt; &amp;#34;: &amp;#34;; std::cin &amp;gt;&amp;gt; votes[i]; } Parallel Arrays Since the parallel arrays are separate, they may be of mixed type.</description>
    </item>
    
    <item>
      <title>01a: Structured Programming Basics</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/01a_sp_basics/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/01a_sp_basics/</guid>
      <description>StructuredProgrammingBasics Gaddis (Ch. 1, 2) First Principles computer - a programmable machine designed to follow instructions Computers are able to perform mathematical and logical operations at great speed. algorithm - a precise, step-by-step plan for solving a problem program - a set of instructions expressed in a programming language that a computer follows to perform a task programmer - a person who writes a computer program programming language - any language designed specifically for use in creating computer programs A computer is simply a re-configurable mechanical tool.</description>
    </item>
    
    <item>
      <title>01b: Variables, Operators, Common Errors</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/01b_variables_operators_errors/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/01b_variables_operators_errors/</guid>
      <description>Variables Operators Common Errors Gaddis (Ch. 2) The Big Picture All programming languages must provide certain functionality:
Temporary data storage and retrieval. How is data stored in RAM? Operators that can be applied to the data. What can I do to manipulate the data, and how? Input and Output Where does the data come from, and how? Control Structures Conditional execution and repetition. To learn a language, figure these things out first.</description>
    </item>
    
    <item>
      <title>02a: Selection</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/02a_selection/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/02a_selection/</guid>
      <description>Selection Gaddis (Ch. 4) Making Decisions One of the things computers are &amp;ldquo;good at&amp;rdquo; is determining the result of logic-based (Boolean) expressions, and using those results to make decisions quickly.
Choose to whether or not to perform an operation. If it is raining outside, take an umbrella. Choose between possible outcomes. If you are taller than 38&amp;quot;, proceed to the ride, otherwise leave the line. Select from a variety of possible choices.</description>
    </item>
    
    <item>
      <title>02b: Repetition</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/02b_repetition/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/02b_repetition/</guid>
      <description>Repetition Gaddis (Ch. 5) First, some helpful new operators&amp;hellip; Shortcut Assignment Operators Make modifying an existing value easy. Increment and Decrement Operators Make counting up and down easy. Shortcut Assignment Operators
A more general set of shortcut operators are provided for modifying a variable by applying one of the 5 basic mathematical operations.
Increment and Decrement Operators
To make it even easier to add or subtract one from a variable, C++ offers a set of two increment (add one) and two decrement (subtract one) operators:</description>
    </item>
    
    <item>
      <title>03a: Functions and Value Parameters</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/03a_functions_value_parameters/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/03a_functions_value_parameters/</guid>
      <description>Functions and Value Parameters Gaddis (Ch. 6) Modular Programming Modular programming refers to the practice of designing a program so that it is broken up into small, manageable pieces called functions or modules.
In C++, a function is a collection of related statements that perform a single logical task.
In Object-Oriented programming, a function may also be referred to as a method. For example, in cin.ignore(), the ignore() function is actually a method owned by the cin object.</description>
    </item>
    
    <item>
      <title>03b: Functions and Reference Parameters</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/03b_functions_reference_parameters/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/03b_functions_reference_parameters/</guid>
      <description>Functions &amp;amp; Reference Parameters Gaddis (Ch. 6) Review: Pass by Value In pass by value, the value of the actual parameter is copied into the formal parameter. Pass by value is the default method by which data is moved into a function for primitive types, structured types and object types. Changes to the formal parameter cannot affect the actual parameter. Pass by Reference In pass by reference, no copy is made.</description>
    </item>
    
    <item>
      <title>04: Recursion</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/04_recursion/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/04_recursion/</guid>
      <description>Recursion Gaddis Ch. 6 &amp;amp; 19
Recursion A function is said to be recursive if it contains a call to itself.
Recursive definitions are often more &amp;ldquo;natural&amp;rdquo;. Embodies a &amp;ldquo;divide-and-conquer&amp;rdquo; strategy void countDown(int timer) { if (timer == 0) { std::cout &amp;lt;&amp;lt; &amp;#34;Blastoff!&amp;#34;; } else{ std::cout &amp;lt;&amp;lt; timer &amp;lt;&amp;lt; &amp;#34;...\n&amp;#34;; countDown(timer-1); // recursive call } } Tracing a Recursive Call
Purpose Recursion is an alternative way to achieve repetition. Sometimes the iterative approach (loop) isn&amp;rsquo;t obvious.</description>
    </item>
    
    <item>
      <title>05b: C-Style Strings</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/05b_c-strings/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/05b_c-strings/</guid>
      <description>Characters &amp;amp;C-Style Strings Gaddis Ch. 10 ASCII Encoding Internally, all characters must be encoded into a numeric representation.
There is more than one way to do it&amp;hellip; But C++ (by default) type char uses the ASCII encoding scheme.
background-image: url(../images/shared/ascii_table.svg)
Testing Characters The following functions require the &amp;lt;cctype&amp;gt; header.
Case Conversion Also require the &amp;lt;cctype&amp;gt; header.
Functions:
toupper(char c): if c is a lowercase letter, return uppercase equivalent; otherwise, return c unchanged.</description>
    </item>
    
    <item>
      <title>06: Pointers</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/06_pointers/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/06_pointers/</guid>
      <description>Pointers Gaddis Ch. 9 Addresses and Data Every variable in a program is stored at a unique memory address.
The unary &amp;amp; is the address operator; the address operator retrieves the address of its operand:
int x = 42; // Print out the address at which x is stored: std::cout &amp;lt;&amp;lt; &amp;amp;x &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; Pointers A pointer is a variable that stores a memory address. Declare by adding the pointer type modifier ( * ) to a variable declaration.</description>
    </item>
    
    <item>
      <title>07a: Vectors</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/07a_vector/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/07a_vector/</guid>
      <description>STL and std::vector Gaddis Ch. 16.5 background-image: url(../images/STL/circle_template.jpg)
STL The C++ Standard Template Library The Standard Template Library What is STL? Why use STL? Overview of STL Features and Concepts Containers Iterators Algorithms References for more information on STL What is STL? &amp;ldquo;The Standard Template Library provides a set of well structured generic C++ components that work together in a seamless way.&amp;rdquo;
- Alexander Stepanov &amp;amp; Meng Lee,
The Standard Template Library</description>
    </item>
    
    <item>
      <title>07b Supplement 2: cmath and Epsilon Comparison</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/07b-supplement-2_cmath_epsilon_comparison/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/07b-supplement-2_cmath_epsilon_comparison/</guid>
      <description>Epsilon Comparison Gaddis Ch. 4 Supplement Mathematical Functions There are many mathematical functions that do not have an operator in C++. The &amp;lt;cmath&amp;gt; library provides definitions for these. Some examples are:
Example #include &amp;lt;iostream&amp;gt; #include &amp;lt;cmath&amp;gt; int main(){ double a = 3.0; double b = 4.0; double c = sqrt( pow(a, 2) + pow(b, 2) ); // Pythagorean Theorem std::cout &amp;lt;&amp;lt; &amp;#34;The hypotenuse is: &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &amp;#34;.\n&amp;#34;; return 0; } Numerical Inaccuracy Computers use binary (base-2) numbers internally.</description>
    </item>
    
    <item>
      <title>07b Supplement: Formatted Output</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/07b-supplement_formatted_output_getline/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/07b-supplement_formatted_output_getline/</guid>
      <description>Formatted Output,getline(), &amp;lt;cmath&amp;gt; Gaddis Ch. 2, 3 Supplement Formatted Output The &amp;lt;iomanip&amp;gt; library supplies a set of stream manipulators that may be used in conjunction with the stream insertion operator to format output.
Example double price = 100.0 / 3.0; // 33.3333333... std::cout &amp;lt;&amp;lt; std::setprecision(2) &amp;lt;&amp;lt; std::fixed; std::cout &amp;lt;&amp;lt; &amp;#34;Total price: $&amp;#34; &amp;lt;&amp;lt; std::setw(8) &amp;lt;&amp;lt; price &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; std::cout &amp;lt;&amp;lt; &amp;#34;100 items: $&amp;#34; &amp;lt;&amp;lt; std::setw(8) &amp;lt;&amp;lt; 100 * price &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; Output:</description>
    </item>
    
    <item>
      <title>07b: Input and Output</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/07b_input_and_output/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/07b_input_and_output/</guid>
      <description>Input and Output Gaddis Ch. 3, 5.11 Review: Output Streams Recall that a stream is a one-way flow of information. Output streams are streams that take information from the running program and move it to the outside world.
The standard output stream is named std::cout Often shortened to cout (add using std::cout; after the include) We will refer to the standard output stream as cout in discussion. Output streams work together with the stream insertion operator ( &amp;lt;&amp;lt; ).</description>
    </item>
    
    <item>
      <title>08: Searching and Sorting</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/08_searching_sorting/</link>
      <pubDate>Wed, 13 Jan 2021 12:00:00 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/08_searching_sorting/</guid>
      <description>Search &amp;amp;SortAlgorithms Gaddis Ch. 8 Search Problem: Given an array filled with data, you want to determine if a particular value is in the array.
Is the value present? If so, where is it located? Does this array contain the value 85? If so, where?
What about 72?
Linear Search Linear search is a simple, brute-force approach:
To find a value V in array A:
Linear Search Discussion Advantages Simple to understand Always finds the target value (if it is present) Places no requirement on the ordering of the array Disadvantage Slow Best, average, worst performance?</description>
    </item>
    
    <item>
      <title>05a_Arrays</title>
      <link>https://jcausey-astate.github.io/CS50x2_lecture_notes/05a_arrays/</link>
      <pubDate>Fri, 02 Oct 2020 12:30:15 -0500</pubDate>
      
      <guid>https://jcausey-astate.github.io/CS50x2_lecture_notes/05a_arrays/</guid>
      <description>Arrays Gaddis Ch. 7 The C++ Array Arrays allow programmers to store multiple related values of the same type.
Values are stored sequentially in memory. Declaration syntax: type arrayname[ size_declarator ]; Example Declarations
int a[100]; // Declares an array of 100 integers. double b[50]; // Declares an array of 50 doubles. Array Memory Layout The declaration:
int tests[5]; allocates the following memory:
Arrays are a reference type. The array variable does not refer to the array as a whole, only to the location of the first element.</description>
    </item>
    
  </channel>
</rss>
