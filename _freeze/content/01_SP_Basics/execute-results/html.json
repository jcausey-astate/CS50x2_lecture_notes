{
  "hash": "5775d0cccb2bf776fda629274e730849",
  "result": {
    "markdown": "---\nnumber: 01\ntitle: \"01: Structured Programming Basics\"\ndraft: false\n---\n\n\n# Structured Programming Basics\n\n## Gaddis (Ch. 1, 2)\n\n---\n\n## First Principles\n\n* _computer_ - a programmable machine designed to follow instructions\n    - Computers are able to perform mathematical and logical operations at great speed.\n* _algorithm_ - a precise, step-by-step plan for solving a problem\n* _program_ - a set of instructions expressed in a _programming language_ that a computer follows to perform a task\n* _programmer_ - a person who writes a computer program\n* _programming language_ - any language designed specifically for use in creating computer programs\n\n---\n\n### A computer is simply a re-configurable mechanical tool. \n\nProgrammers use programs to direct the behavior of the machine.  \n\nSo, a computer is the ultimate \"Swiss Army Knife\".\n\n---\n\n## Computer Code\n\nComputers execute code that is stored in _computer memory_ in a _binary_ form.\n\n    11000111 01000100 00100100 00000100 00011000 10000111 00000100\n\nHumans are not skilled at writing in machine language.\n\n![:height Confused Human, 10em](images/SP_Basics/confused_brad.jpg) <!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n\n---\n\n## Language Levels\n\n* Low-Level \n    - Machine Language\n        + Pure binary, but usually expressed as hexadecimal\n    - Assembly Language\n        + Corresponds more or less 1:1 with machine language (easy conversion)\n        + More human-readable (for some definition of _more_)\n* High-Level\n    - C, C++, Python, Swift, etc.\n        + Designed to look like a human language\n        + Must be translated to machine language\n\n---\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n::: {.fragment .current-only data-code-focus=\"1\"}\nWhen this fragment is shown, the first line of code will have the `focus` class added to it and it gets highlighted.\n:::\n\n::: {.fragment .current-only data-code-focus=\"2\"}\nAnother fragment. This time, both lines will now have the `focus` class.\n:::\n\n::: {.fragment .current-only data-code-focus=\"1,3\"}\nAnd now both 1 and 3.\n:::\n\n\n---\n\n## A Complete C++ Program:\n\n``` cpp\n#include <iostream>\n\nint main(){\n    std::cout << \"Hello, World!\\n\";\n    return 0;\n}\n\n```\n\nNow, we will take a look at the parts of the program, and see what each part does.\n\n---\n\n## Program Parts\n\n``` cpp\n#include <iostream>\n```\n\n* This line is called a _preprocessor directive_.  \n* It communicates with a phase of the C++ compiler called the _preprocessor_, telling it to include code from a file named _\"iostream\"_, which is a C++ library.  \n* The _iostream_ library contains code that is used for input and output activities.\n\n\n---\n\n## Program Parts\n\n``` cpp\nint main()\n```\n\n* This line is called a _function header_.\n* It begins the definition of a function called \"main\".\n* Every C++ program *must* contain a `main()` function.\n    - The `main()` function tells the computer where to begin executing.\n    - Instructions will be executed one at a time, starting with the first line of `main`.\n\n\n---\n\n## Program Parts\n\n```cpp\n{\n\n}\n```\n\n* The _curly braces_ enclose a _block_ of code in C++.\n* __block__ - a set of related C++ statements that perform an action\n* Every opening curly brace must match with a closing brace.  \n    - We indent the code between the `{` and the `}`.\n\n\n---\n\n## Program Parts\n\n``` cpp\n    std::cout << \"Hello, World\\n\";\n```\n::: {.small-95}\n* This _statement_ sends the words \"Hello, World\" to the screen.\n* `std::cout` is the name of the _standard output_ _stream_\n    - A _stream_ is a one-way flow of data from the point of view of the program.\n* `<<` is the _stream insertion operator_, used to place things into a stream.\n* `\"Hello, World!\\n\"` is a _string literal_; a _string_ is just a collection of characters that are treated as a single unit.\n    - String literals are always surrounded by double-quotes.\n:::\n\n* **_literal_**: A literal is a value that is typed directly into the source code, in a representation that the programming language recognizes as a value of a recognized type.  Literal values must be formatted according to the syntax rules of the language.\n\n---\n\n## Escape Characters\n\n``` cpp\n    std::cout << \"Hello, World\\n\";\n```\n\n::: {.small}\nWe often want to include _control characters_ in our string literals, but we don't have the ability to type these in directly.  C++ allows the use of _escape characters_ for this purpose.\n:::\n\n* __escape character__ - any character combination beginning with \"`\\`\", used to represent a character that cannot otherwise be represented in a string literal.\n\n\n__Examples:__\n\n    Code     Meaning\n    -----------------\n     \\n      newline (think of the <ENTER> key)\n     \\t      tab character\n     \\\"      allows a double-quote in a string literal\n     \\\\      allows a backslash in a string literal\n     \\r      carriage-return (used in Windows line endings: \"\\r\\n\")\n\n\n---\n\n## Program Parts\n\n``` cpp\n    return 0;\n```\n\n* This line terminates the program by causing the `main()` function to return the value `0` to the operating system.\n    - No code following this line would ever be executed; this means that the `return 0;` line will always be the last line in `main()`.\n* The operating system considers zero to be an indication that the program ran normally.  \n    -  Other values are possible, and we will use them later.\n\n---\n\n__Terms from Program Parts__\n\n* **_preprocessor_** : compiler component that works on the source code itself.  Directives start with `#` symbol.\n* **_library_** or _header_ : a file containing C++ code that adds functionality to your program.\n* **_statement_** : a single logical step expressed in C++ (usually one line)  _Ends with a semicolon!_\n* **_stream_** : a one-way flow of data in a program\n* **_literal_** : a data value that is hard-coded in a program\n* **_string_** : a collection of characters treated as a single data value\n* **_block_** : a collection of related statements surrounded by curly braces\n\n---\n\n## Our Development Toolchain\n\n![](images/SP_Basics/Our_Compiling_Toolchain.png) \n\n* User's Side: Editing, running and testing.\n* Server Side: Stores files, provides compiler and other tools.\n\n---\n\n## Some Linux / UNIX terminal basics\n\n<https://towardsdatascience.com/basics-of-bash-for-beginners-92e53a4c117a>\n\n<https://www.educative.io/blog/bash-shell-command-cheat-sheet>\n\n<https://wiki.cs.astate.edu/index.php/Common_Linux_Commands> [(Requires VPN access.)]{.small}\n\n---\n\n## Practice Developing and Compiling\n\n``` cpp\n#include <iostream>\n\nint main(){\n    std::cout << \"Hello, World!\\n\";\n    return 0;\n}\n\n```\n\nMake modifications to the program so that it will print out your name, favorite food, and favorite TV series.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}