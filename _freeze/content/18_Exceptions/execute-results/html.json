{
  "hash": "f75156556b616e2f9084cda4076901d0",
  "result": {
    "markdown": "---\nnumber: 18\ntitle: \"Exceptions\"\ntextbook: \"Gaddis (Ch. 16)\"\n# draft: true\n---\n\n## Exceptions {.morespace}\n#### (When Everything Goes Wrong)\n\n\\\n\n* Used to communicate that something unexpected has occurred.\n* Allows the programmer to deal with unexpected situations in a controlled manner.\n* May be as simple or as complex as desired (depending on usage in the program)\n* In C++, _any_ data value can be used as an exception!\n\n---\n\n## Key Words\n\n\\\n\n__*`throw`*__ - Used to generate an exception and “throw” it up the _call stack_.\n\\\n\\\n__*`try`*__ – Used to enclose a block of code in which an exception _might_ occur (allowing the programmer to handle it if it does).\n\\\n\\\n__*`catch`*__ – Used to detect and handle a specific type of exception, if it _actually occurred_ during execution of a `try` block.\n\n---\n\n## Exceptions are about _Communication_\n\\\n\nWhen something goes very wrong [_in a way that you cannot fix in the local context_]{.highlight}, exceptions give you a way to communicate that problem to a higher level in the program structure.\n\n---\n\n### Exceptions are:\n\n* **out-of-band**\n    - They don't add complexity to function or object **interfaces**.\n        + They let the parameters and return types represent whatever they _naturally_ should, without mixing in error signaling.\n\\\n\\\n* **impossible to ignore**\n    - Someone using your library can't just ignore them (and expect their program to keep running).\n    - It forces us to think about what kinds of errors may happen.\n\\\n\nExceptions are a way to handle things that *shouldn't have happened* when they inevitably *do happen*.\n\n---\n\n## Flow of Control\n\n\\\n\nWhen something unexpected happens, a function may choose to throw an exception.  \n\\\n\n* At this point, execution leaves the function immediately!\n* Exception moved up the call stack until a `try` with a matching  `catch` clause is found.\n    - Execution resumes with the first line of the `catch` block (if found).\n* If not caught, the exception eventually makes it up to the OS, which will shut down the process.\n\n---\n\n### Example\n\n\\\n\n\n```{cpp}\n// function that *may* throw an exception\nint totalDays(int days, int weeks){\n    if((days < 0) || (days > 7)){\n        // value being thrown is a C-string:\n        throw \"Invalid value for days.\";\n    }\n    if(weeks < 0){\n        throw \"Invalid value for weeks.\";\n    }\n    return 7 * weeks + days;\n}\n```\n\n\n---\n\n### Example: Handling the Exception\n\n\n```{cpp}\nint main(){\n    int days, weeks;\n    cout << \"Enter days and weeks separated by space: \\n\";\n    cin  >> days >> weeks;\n    \n    try {  \n        int totDays = totalDays(days, weeks);\n        cout << \"Total days: \" << totDays;\n    }\n    catch (const char* msg) {\n        cout << \"Error: \" << msg;\n    }\n    return 0;\n}\n```\n\n\n*Should* you *rely* on exception handling here?\\\n\\ \\ \\ \\ [(**NO**, you should check the values first.)]{.small-80}\n\n\\\nBut, exceptions provide an impossible-to-ignore [failsafe]{.green} in case the person writing `main()` wasn't thinking about checking pre-conditions.\n\n---\n\n## What Happens? {.morespace}\n\n* `try` block is entered.  `totalDays()` function is called.\n* If 1<sup>st</sup> parameter is between 0 and 7, calculate the number of days and return as usual (no exception).\n* If 1st parameter is out of range, exception of type `const char*` is thrown: Execution leaves the function immediately.\n* `try` block execution is halted, execution jumps to first `catch` block, looking for a <br />\n`catch(const char*)` <br />\n* Since the type matches, execution resumes in the `catch` block.\n\n---\n\n### Example: Exceptions Can't be Ignored\n\\\n\n\n```{cpp}\nint main(){\n    int days, weeks;\n    cout << \"Enter days and weeks separated by space: \\n\";\n    cin  >> days >> weeks;\n    // No validity check at all!\n    int totDays = totalDays(days, weeks);\n    cout << \"Total days: \" << totDays;\n\n    return 0;\n}\n```\n\n\\\n\nThis code does not check to see if the values entered are valid.  \n\nIf they aren't the exception will be thrown, but not caught, and the program will crash.\n\n\\\n\n**Exceptions cannot be (implicitly) ignored!**\n\n---\n\n### Example: Checking Pre-Conditions\n\\\n\n\n```{cpp}\nint main(){\n    int days, weeks;\n    cout << \"Enter days and weeks separated by space: \\n\";\n    cin  >> days >> weeks;\n    // check pre-conditions first:\n    if( days >= 0 && days < 7 && weeks >= 0 ){\n        int totDays = totalDays(days, weeks);\n        cout << \"Total days: \" << totDays << '\\n';\n    }\n    else{\n        cout << \"You entered invalid values.\\n\";\n    }\n    return 0;\n}\n```\n\n\\\n\nThis code checks the pre-conditions before calling `totDays()`, so the exception can't be thrown.\n\nThis is probably the \"best\" (most well thought-out) implementation.\n\n---\n\n## Notes {.morespace}\n\n* Many `catch` blocks may follow a single `try` (but there must be at least one).\n* You cannot `catch` without `try`, or `try` without `catch`.\n* `catch` blocks are scanned until one matches the type of the exception thrown.\n* `catch` blocks may or may not have formal parameter name (depending on whether the exception value itself will be needed inside the block).\n\n---\n\n## Missed Exceptions {.morespace}\n\n* Failure to catch an exception just means it continues “flying” up the call stack. \n* If it gets all the way out of `main()` without being caught, the program will be terminated by the OS.\n* It is possible to define a “catch-all” `catch` block (although it is often considered sloppy to do so):<br />\n`catch( ... )` <br />  \n    * If you define a “catch-all”, it should be the last `catch` in the chain.\n\n---\n\n## Exception Classes/Objects\n\n* Any type may be thrown.  Even custom objects.\n* We can define objects specifically for this purpose.\n* _Exception classes_ are useful to put a meaningful name on the type (so that `catch` blocks are easy to understand).\n\n**Example**\n\n`catch( NullPointerException )`\n\nis better than\n\n`catch( int )`\n\n---\n\n## Exception Classes\n\n* Don’t necessarily need members\n    - _Unless they do: if the added functionality is useful, add it!_\n\n**Example**\n\n\n```{cpp}\nclass NullPointerException{ };  // empty\n```\n\n\nOr:\n\n\n```{cpp}\nclass NullPointerException{\n    public:\n        string msg;            // with attribute\n};\n```\n\n\n---\n\n## Standard Exceptions\n\nThe C++ Standard Library defines an `exception` base class in the `<exception>` header.\n\n* Useful (later) to make our own exceptions with nice [common behaviors]{.green}.\n\n```cpp\n#include<exception>\nusing std::exception;\n\nclass NullPointerException : public exception{\n    public:\n        virtual const char* what()const {\n            return “A null pointer was encountered.”;\n        }\n};\n```\n\n---\n\n## Standard Exceptions\n\nAlso, _Polymorphism_!\n\n\n```{cpp}\ntry{\n    [...] \n}\ncatch(exception& e){   \n    // catches _any_ standard exception!\n    cout << e.what()  << endl;\n}\n```\n\n\n---\n\n**Pre-Defined Standard Exceptions**\n\nThe `<stdexcept>` header defines some standard exception classes that are ready-to-use.  They are divided into two sets (names are self-explanatory):\n\n**Logic errors**\n```cpp\nlogic_error      \ndomain_error     \ninvalid_argument \nlength_error\nout_of_range\n```\n\n**Runtime errors**\n\n```cpp\nruntime_error   \nrange_error     \noverflow_error  \nunderflow_error \n```\n\n---\n\n**Other Useful Standard Library Exceptions**\n\n```cpp\n    exception\n    bad_alloc\n    bad_cast\n    bad_exception\n    bad_typeid\n    ios_base::failure\n```\n\n---\n\n## Documentation Guidelines\n\nExceptions require some new documentation...  Here's an example:\n\n```cpp\n/**\n * converts a numerical ranking in {1,2,3} to the corresponding \n * medal color from {\"gold\",\"silver\",\"bronze\"}\n * \n * @param  rank  integer numerical ranking; should be in {1,2,3}\n * @return the corresponding metal color for `rank` is returned \n *         from the set {\"gold\", \"silver\", \"bronze\"}.\n * @throw  std::invalid_argument is thrown if `rank` is not one\n *         of {1,2,3}.\n */\n```\n\n---\n\n## Documentation Guidelines\n\n```cpp\n * @throw  std::invalid_argument is thrown if `rank` is not one\n *         of {1,2,3}.\n```\n\nNotice the `@throw` Doxygen tag -- it should be used once for *each type*\nof exception your function may throw.\n\nBe sure to describe the exception *type*, as well as when/why it would\nbe thrown.\n\n",
    "supporting": [
      "18_Exceptions_files"
    ],
    "filters": [],
    "includes": {}
  }
}