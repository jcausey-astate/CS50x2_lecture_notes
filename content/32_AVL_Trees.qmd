---
number: 32
title: "Balancing Trees - AVL Trees"
textbook: "Drozdek (Ch. 6.7)"
draft: false
---

## Keep your Balance

An _AVL Tree_ is a tree where the height of the left and right subtrees always differ by at most one.

* Each node has an associated _balance factor_
    * `balance = height(right) - height(left)`

* The AVL property states that the balance factor at all nodes must be in the range $[-1,1]$.

---

## Balance

If the magnitude of any node's balance factor becomes $>1$, the tree must be balanced.

* 4 cases (but 2 are symmetrical):
    * "Heavy" on left subtree of left child.
    * "Heavy" on right subtree of left child.
    * "Heavy" on right subtree of right child.
    * "Heavy" on left subtree of right child.

---

## Fixing the Balance

\

When the balance factor rule is broken, we must correct the balance.  That can be done
by applying a transformation to the tree's shape called a **_rotation_**.  The rotation
can be performed either in a clockwise (_right_) direction, or counter-clockwise 
(_left_) direction.

\

A single rotation will have the effect of shifting some of the "weight" from one side 
of the node about which we are rotating (we call this node the **_pivot_** node) to
the other.

---

### Rotations

**_**Rotate Left**_**

![Rotate Left - $Q$ is the pivot node.](images/avl_tree/tree_rotate_left.svg "Rotate Left - $Q$ is the pivot node."){height=7.5em}

::: {.tight}
(a) The subtree rooted at $P$ is balanced.

(b) A value is added to the subtree on the right of $Q$, increasing its height by one. This causes the balance factor at $P$ to become +2, which is no longer considered balanced.

(c) A single **_left rotation_** is performed rooted at node $P$ with pivot represented by node $Q$.  This results in $Q$ becoming the parent of $P$, and the tree is again balanced.  (Note that $Q$'s left subtree became $P$'s right subtree in the rotation.)
:::

::: {.footnotes}
$G$ in the figure above represents the "_Grandparent_" node, which is the parent of the subtree being rotated.  An outgoing link from the grandparent must be updated to point to the new root of the subtree ($Q$).  There is an edge case where $P$ was the root of the entire tree---in this case, there is no grandparent node, and the tree's _root_ pointer itself must be updated.
:::

---

### Rotations

**_**Rotate Right**_**

![Rotate Right - $Q$ is the pivot node.](images/avl_tree/tree_rotate_right.svg "Rotate Right - $Q$ is the pivot node."){height=7.5em}

::: {.tight}
The single rotations only solve the problem when the tree is "heavy" along the "outside" of the **subtree** (heavy on left side of left child, or on right side of right child).
:::

---

#### Double-Rotations

::: {.tight .small-85}
[If the tree is "heavy" in the "inside" of a subtree (either the right-side of a left child, or the left-side of a right child) then a double rotation is required:]{.small}

* left-right
    * Just a left-rotate at the child, followed by a right-rotate at the original (pivot) node.

![[Subtree (a) becomes heavy on "inside" of left subtree (b), requiring a left rotation to shift height to the left (c) then a right rotation to balance the subtree (d).]{.small-60}](images/avl_tree/tree_rotate_left-right.svg "Subtree (a) becomes heavy on "inside" of left subtree (b), requiring a left rotation to shift height to the left (c) then a right rotation to balance the subtree (d)."){height=7em}

* right-left
    * Just a right-rotate at the child, followed by a left-rotate at the original (pivot) node.

![[Subtree (a) becomes heavy on "inside" of right subtree (b), requiring a right rotation to shift height to the right (c) then a left rotation to balance the subtree (d).]{.small-60}](images/avl_tree/tree_rotate_right-left.svg "Subtree (a) becomes heavy on "inside" of right subtree (b), requiring a right rotation to shift height to the right (c) then a left rotation to balance the subtree (d)."){height=7em}
:::

---

## Visualizations

\

<https://www.cs.usfca.edu/~galles/visualization/AVLtree.html>


