---
number: 31
title: "Trees - Binary Search Trees"
textbook: "Gaddis (Ch. 21), Drozdek (Ch. 6)"
draft: false
---

## Trees

In the computer science sense, **_trees_** are simply non-linear linked structures where each node may link to two or more other nodes, in a _hierarchical_ fashion.

* The entry point into a tree is called the **_root_**.
* Trees are (usually) drawn "upside down", with the root at the top.
* Normally, we don’t draw the null pointers when we draw a tree... but we must remember that they are there.

---

## {background-image=images/Trees/trees.png background-size='contain'}

\

---

## Trees
We use terms borrowed from family trees to describe the hierarchical relationships between nodes in CS trees.<br />  (parent, child, grandparent, sibling, etc.)

* **_Interior nodes_** – have at least one child
* **_Leaf nodes_** – have no children
* **_Edge_** - A non-null outgoing link from a node to its child node.
* **_Height_** - Longest path along edges from root to any leaf, plus one.
    - (The empty tree is height 0, a single node is height 1.)
* **_Subtree_** - any node in the tree, and all its descendants.

---

## {background-image=images/Trees/trees.png background-size='contain'}

\

---

## Binary Trees

A **_binary tree_** is a tree in which each node has up to two children.

* These are the most common type
* Easy to design and conceptualize (and code)
* Useful in many contexts
* The order of the values may or may not matter.

<!-- --- -->

# Binary Tree Node

The binary tree "Node" must store a payload value and maintain pointers to the left and right subtree.

![](images/Trees/Binary_Tree_Node.svg)

<!-- --- -->

# Binary Tree

The "Tree" object must store an owning pointer to the root of the tree.  The tree itself has ownership responsibility for all nodes in the data structure.

![](images/Trees/Binary_Tree.svg)


<!-- --- -->

# Binary Search Trees

A **_Binary Search Tree_** is a binary tree that has the following additional properties: 

* From any node in the tree, the left child (if non-null) has a smaller value than the parent.
* From any node in the tree, the right child (if non-null) has a larger value than the parent.

As the name implies, Binary Search Trees are optimized for searching.

---

## Binary Search Trees

Binary search trees are shaped by the order in which values are added to the container.

* Order of value addition affects efficiency.
* Consider these different situations:

  * "Random" arrival

  * Non-random (partially ordered) arrival

  * Discuss best, average, worst case search time for each.

---

## Examples - Build algorithms for the following:

* Add items

* Search for items

* Traversals
 
    * In-order

    * pre-order

    * post-order

* Remove items

---

### Search for items

::: {.algorithm .small-95}
    algorithm binary search tree search (item, root):
        let current := root
        let answer  := not_found_indicator
        if item == value at current:
            let answer := current
        otherwise, if item < value at current:
            if current has a left child:
                let answer := tree search for item at current's left child.
        otherwise:
            if current has a right child:
                let answer := tree search for item at current's right child.
        return answer.
:::

---

### Add an item

::: {.algorithm .small-95}
    algorithm binary search tree insert (item, root):
        let current := root
        if item < value at current:
            if current has no left child:
                add new node containing item as current's left child.
            otherwise:
                insert item in the subtree rooted at current's left child.
        otherwise:
            if current has no right child:
                add new node containing item as current's right child.
            otherwise:
                insert item in the subtree rooted at current's right child.
:::

---

### Traversals
::: {.small-80}

**Traversal:** **_In-order_**

::: {.algorithm .small-80 .fragment}
    algorithm binary search tree in-order traversal (root):
        let current := root
        if current exists:
            perform in-order traversal from current's left child.
            visit the current node.
            perform in-order traversal from current's right child.
:::

\

**Traversal:** **_pre-order_**

::: {.algorithm .small-80 .fragment}
    algorithm binary search tree in-order traversal (root):
        let current := root
        if current exists:
            visit the current node.
            perform in-order traversal from current's left child.
            perform in-order traversal from current's right child.
:::

\

**Traversal:** **_post-order_**

::: {.algorithm .small-80 .fragment}
    algorithm binary search tree in-order traversal (root):
        let current := root
        if current exists:
            perform in-order traversal from current's left child.
            perform in-order traversal from current's right child.
            visit the current node.
:::
:::

---

### Remove items

\

Deleting an item from a binary tree is a bit more complicated, since the target item may have left and/or right subtrees attached.

\

We will take a look at the simple cases, and then the more complicated ones.

---

#### Tree deletion - trivial cases

![Delete a leaf node.](images/Trees/tree_delete_leaf_fig_6.26.png)

<br>

![Delete a node with a single subtree.](images/Trees/tree_delete_node-with-one-child_fig_6.27.png)

---

#### Tree deletion - delete by merge (refer to Drozdek Ch. 6.6 for algorithms)

![Delete by merging.](images/Trees/tree_delete_by-merge_fig_6.28.png)

![Delete by merging.](images/Trees/tree_delete_by-merge-steps_fig_6.30.png)

---

## Visualizations

\

<https://www.cs.usfca.edu/~galles/visualization/BST.html>
